<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>

  <display-name>Archetype Created Web Application</display-name>

  <!--指定ioc容器启动时，使用的xml配置文件位置-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:springApplication.xml</param-value>
  </context-param>

  <!--java-web 组件中的监听器， spring对此监听器的实现， 目的为在web项目启动时，调用此监听器中contextInitialized方法中启动一个spring容器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--spring-mvc 的核心servlet，拦截所有web请求，所有经由此servlet的请求接可已被spring所接管，即可是使用一些spring的功能-->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!--指定dispatchServlet使用的配置xml-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!--服务器启动时，即创建此servlet，若不设置，则在有请求时，才创建该servlet， 值越小，创建的优先级越高-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--指定dispatchServlet拦截的路径， /*为拦截所有请求， /为拦截所有静态的请求-->
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>


</web-app>
